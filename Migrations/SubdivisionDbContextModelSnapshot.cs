// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Subdivision.Data;

#nullable disable

namespace Subdivision.Migrations
{
    [DbContext(typeof(SubdivisionDbContext))]
    partial class SubdivisionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Subdivision.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            LoginId = 1
                        });
                });

            modelBuilder.Entity("Subdivision.Models.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("AdminId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Subdivision.Models.Bill", b =>
                {
                    b.Property<int>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BillType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("BillId");

                    b.HasIndex("HomeownerId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Subdivision.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComplaintId"));

                    b.Property<string>("ComplaintContent")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("ComplaintDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ComplaintId");

                    b.HasIndex("HomeownerId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("Subdivision.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ContactId");

                    b.HasIndex("AdminId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Subdivision.Models.CreditDebitCard", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardId"));

                    b.Property<string>("CVV")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(19)
                        .HasColumnType("nvarchar(19)");

                    b.Property<string>("CardholderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CardId");

                    b.ToTable("CreditDebitCard");
                });

            modelBuilder.Entity("Subdivision.Models.EventCalendar", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDesc")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrganizedById")
                        .HasColumnType("int");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EventId");

                    b.HasIndex("OrganizedById");

                    b.ToTable("EventCalendars");
                });

            modelBuilder.Entity("Subdivision.Models.EventVisibility", b =>
                {
                    b.Property<int>("EventVisibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventVisibilityId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.HasKey("EventVisibilityId");

                    b.HasIndex("EventId");

                    b.HasIndex("LoginId");

                    b.ToTable("EventVisibilities");
                });

            modelBuilder.Entity("Subdivision.Models.Facility", b =>
                {
                    b.Property<int>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacilityId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityCapacity")
                        .HasColumnType("int");

                    b.Property<string>("FacilityImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RulesRegulations")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TypeOfFacility")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WorkingDays")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FacilityId");

                    b.HasIndex("AdminId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Subdivision.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("FeedbackContent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("HomeownerId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Subdivision.Models.Forum", b =>
                {
                    b.Property<int>("ForumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForumId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("DateTimePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ForumTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("ForumId");

                    b.HasIndex("AdminId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("Subdivision.Models.ForumReplies", b =>
                {
                    b.Property<int>("ForumRepliesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForumRepliesId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<int?>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<string>("RepliedContent")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("ForumRepliesId");

                    b.HasIndex("AdminId");

                    b.HasIndex("ForumId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("StaffId");

                    b.ToTable("ForumReplies");
                });

            modelBuilder.Entity("Subdivision.Models.Homeowner", b =>
                {
                    b.Property<int>("HomeownerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeownerId"));

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.HasKey("HomeownerId");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("Homeowners");
                });

            modelBuilder.Entity("Subdivision.Models.OnlineBanking", b =>
                {
                    b.Property<int>("OnlineBankingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OnlineBankingId"));

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TransactionRefNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OnlineBankingId");

                    b.ToTable("OnlineBanking");
                });

            modelBuilder.Entity("Subdivision.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int?>("CardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfPayment")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModeOfPayment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OnlineBankingId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("BillId");

                    b.HasIndex("CardId");

                    b.HasIndex("OnlineBankingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Subdivision.Models.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfReservation")
                        .HasColumnType("datetime2");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationId");

                    b.HasIndex("AdminId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("HomeownerId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Subdivision.Models.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("StaffId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("Subdivision.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Subdivision.Models.User", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoginId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            LoginId = 1,
                            Address = "Admin Address",
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            Image = "default.png",
                            LastName = "User",
                            Password = "$2a$11$8icRySkuU81x31OMdr7m4emQJNBInJzOzSoe.Okg0uISEsMW4YL5i",
                            PhoneNumber = "0000000000",
                            UserType = 0,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Subdivision.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VehicleId");

                    b.HasIndex("HomeownerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Subdivision.Models.VisitorPass", b =>
                {
                    b.Property<int>("VisitorPassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorPassId"));

                    b.Property<int>("LoggedById")
                        .HasColumnType("int");

                    b.Property<string>("PassStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitorPassRequestId")
                        .HasColumnType("int");

                    b.HasKey("VisitorPassId");

                    b.HasIndex("LoggedById");

                    b.HasIndex("StaffId");

                    b.HasIndex("VisitorPassRequestId");

                    b.ToTable("VisitorPasses");
                });

            modelBuilder.Entity("Subdivision.Models.VisitorPassRequest", b =>
                {
                    b.Property<int>("VisitorPassRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorPassRequestId"));

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("datetime2");

                    b.Property<int>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PurposeOfVisit")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeSpan>("TimeOfVisit")
                        .HasColumnType("time");

                    b.Property<string>("TypeOfVehicle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("VisitorFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VisitorStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("VisitorPassRequestId");

                    b.HasIndex("HomeownerId");

                    b.ToTable("VisitorPassRequests");
                });

            modelBuilder.Entity("Subdivision.Models.Admin", b =>
                {
                    b.HasOne("Subdivision.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Subdivision.Models.Admin", "LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Subdivision.Models.Announcement", b =>
                {
                    b.HasOne("Subdivision.Models.Admin", null)
                        .WithMany("Announcements")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Subdivision.Models.Bill", b =>
                {
                    b.HasOne("Subdivision.Models.Homeowner", "Homeowner")
                        .WithMany("Bills")
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homeowner");
                });

            modelBuilder.Entity("Subdivision.Models.Complaint", b =>
                {
                    b.HasOne("Subdivision.Models.Homeowner", "Homeowner")
                        .WithMany("Complaints")
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homeowner");
                });

            modelBuilder.Entity("Subdivision.Models.Contact", b =>
                {
                    b.HasOne("Subdivision.Models.Admin", "Admin")
                        .WithMany("Contacts")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Subdivision.Models.EventCalendar", b =>
                {
                    b.HasOne("Subdivision.Models.Admin", "OrganizedBy")
                        .WithMany("EventsOrganized")
                        .HasForeignKey("OrganizedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizedBy");
                });

            modelBuilder.Entity("Subdivision.Models.EventVisibility", b =>
                {
                    b.HasOne("Subdivision.Models.EventCalendar", "Event")
                        .WithMany("EventVisibilities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subdivision.Models.User", "User")
                        .WithMany("EventVisibilities")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Subdivision.Models.Facility", b =>
                {
                    b.HasOne("Subdivision.Models.Admin", "Admin")
                        .WithMany("Facilities")
                        .HasForeignKey("AdminId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Subdivision.Models.Feedback", b =>
                {
                    b.HasOne("Subdivision.Models.Homeowner", "Homeowner")
                        .WithMany("Feedbacks")
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homeowner");
                });

            modelBuilder.Entity("Subdivision.Models.Forum", b =>
                {
                    b.HasOne("Subdivision.Models.Admin", null)
                        .WithMany("Forums")
                        .HasForeignKey("AdminId");

                    b.HasOne("Subdivision.Models.Homeowner", null)
                        .WithMany("Forums")
                        .HasForeignKey("HomeownerId");

                    b.HasOne("Subdivision.Models.Staff", null)
                        .WithMany("Forums")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("Subdivision.Models.ForumReplies", b =>
                {
                    b.HasOne("Subdivision.Models.Admin", null)
                        .WithMany("ForumReplies")
                        .HasForeignKey("AdminId");

                    b.HasOne("Subdivision.Models.Forum", null)
                        .WithMany("ForumReplies")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subdivision.Models.Homeowner", null)
                        .WithMany("ForumReplies")
                        .HasForeignKey("HomeownerId");

                    b.HasOne("Subdivision.Models.Staff", null)
                        .WithMany("ForumReplies")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("Subdivision.Models.Homeowner", b =>
                {
                    b.HasOne("Subdivision.Models.User", "User")
                        .WithOne("Homeowner")
                        .HasForeignKey("Subdivision.Models.Homeowner", "LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Subdivision.Models.Payment", b =>
                {
                    b.HasOne("Subdivision.Models.Bill", "Bill")
                        .WithMany("Payments")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Subdivision.Models.CreditDebitCard", "CreditDebitCard")
                        .WithMany("Payments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Subdivision.Models.OnlineBanking", "OnlineBanking")
                        .WithMany("Payments")
                        .HasForeignKey("OnlineBankingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Bill");

                    b.Navigation("CreditDebitCard");

                    b.Navigation("OnlineBanking");
                });

            modelBuilder.Entity("Subdivision.Models.Reservation", b =>
                {
                    b.HasOne("Subdivision.Models.Admin", "Admin")
                        .WithMany("Reservations")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Subdivision.Models.Facility", "Facility")
                        .WithMany("Reservations")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Subdivision.Models.Homeowner", "Homeowner")
                        .WithMany("Reservations")
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Facility");

                    b.Navigation("Homeowner");
                });

            modelBuilder.Entity("Subdivision.Models.ServiceRequest", b =>
                {
                    b.HasOne("Subdivision.Models.Homeowner", "Homeowner")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subdivision.Models.Staff", "Staff")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("StaffId");

                    b.Navigation("Homeowner");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Subdivision.Models.Staff", b =>
                {
                    b.HasOne("Subdivision.Models.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Subdivision.Models.Staff", "LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Subdivision.Models.Vehicle", b =>
                {
                    b.HasOne("Subdivision.Models.Homeowner", "Homeowner")
                        .WithMany("Vehicles")
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homeowner");
                });

            modelBuilder.Entity("Subdivision.Models.VisitorPass", b =>
                {
                    b.HasOne("Subdivision.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("LoggedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Subdivision.Models.Staff", null)
                        .WithMany("VisitorPasses")
                        .HasForeignKey("StaffId");

                    b.HasOne("Subdivision.Models.VisitorPassRequest", "VisitorPassRequest")
                        .WithMany("VisitorPasses")
                        .HasForeignKey("VisitorPassRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("VisitorPassRequest");
                });

            modelBuilder.Entity("Subdivision.Models.VisitorPassRequest", b =>
                {
                    b.HasOne("Subdivision.Models.Homeowner", "Homeowner")
                        .WithMany("VisitorPassRequests")
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homeowner");
                });

            modelBuilder.Entity("Subdivision.Models.Admin", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Contacts");

                    b.Navigation("EventsOrganized");

                    b.Navigation("Facilities");

                    b.Navigation("ForumReplies");

                    b.Navigation("Forums");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Subdivision.Models.Bill", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Subdivision.Models.CreditDebitCard", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Subdivision.Models.EventCalendar", b =>
                {
                    b.Navigation("EventVisibilities");
                });

            modelBuilder.Entity("Subdivision.Models.Facility", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Subdivision.Models.Forum", b =>
                {
                    b.Navigation("ForumReplies");
                });

            modelBuilder.Entity("Subdivision.Models.Homeowner", b =>
                {
                    b.Navigation("Bills");

                    b.Navigation("Complaints");

                    b.Navigation("Feedbacks");

                    b.Navigation("ForumReplies");

                    b.Navigation("Forums");

                    b.Navigation("Reservations");

                    b.Navigation("ServiceRequests");

                    b.Navigation("Vehicles");

                    b.Navigation("VisitorPassRequests");
                });

            modelBuilder.Entity("Subdivision.Models.OnlineBanking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Subdivision.Models.Staff", b =>
                {
                    b.Navigation("ForumReplies");

                    b.Navigation("Forums");

                    b.Navigation("ServiceRequests");

                    b.Navigation("VisitorPasses");
                });

            modelBuilder.Entity("Subdivision.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("EventVisibilities");

                    b.Navigation("Homeowner");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Subdivision.Models.VisitorPassRequest", b =>
                {
                    b.Navigation("VisitorPasses");
                });
#pragma warning restore 612, 618
        }
    }
}
