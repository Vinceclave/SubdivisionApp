@model dynamic
@{
    ViewData["Title"] = "Service Requests";
    ViewData["UserType"] = "Staff";
    ViewData["Page"] = "ServiceRequest";
    Layout = "_UniversalLayout";
}

<div class="space-y-6">
    <div class="flex items-center justify-between">
        <h1 class="text-2xl font-semibold text-gray-900">Assigned Service Requests</h1>
    </div>
    <div class="bg-white rounded-lg shadow p-4">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Requested By</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date & Time</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="serviceRequestsList" class="bg-white divide-y divide-gray-200">
                    <!-- Service requests will be loaded here -->
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            async function loadServiceRequests() {
                try {
                    const response = await fetch('/staff/service-requests/list');
                    const data = await response.json();
                    const tbody = document.getElementById('serviceRequestsList');
                    tbody.innerHTML = '';

                    if (!data.success || !data.requests || !data.requests.length) {
                        tbody.innerHTML = `<tr><td colspan="7" class="text-center py-8 text-gray-500">No assigned service requests found.</td></tr>`;
                        return;
                    }

                    data.requests.forEach(req => {
                        const date = new Date(req.requestDateTime);
                        const formattedDate = date.toLocaleString();
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td class="px-6 py-4">${req.requestType}</td>
                            <td class="px-6 py-4">${req.priority}</td>
                            <td class="px-6 py-4">${req.description}</td>
                            <td class="px-6 py-4">${req.homeownerName || ''}</td>
                            <td class="px-6 py-4">${formattedDate}</td>
                            <td class="px-6 py-4">
                                <span class="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusClass(req.serviceStatus)}">
                                    ${req.serviceStatus}
                                </span>
                            </td>
                            <td class="px-6 py-4 space-x-2">
                                ${(req.serviceStatus === "Pending" || req.serviceStatus === "Assigned") ? 
                                    `<button onclick="startRequest(${req.serviceRequestId})" class="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600 focus:outline-none">Start</button>` : ''}
                                ${req.serviceStatus === "In Progress" ? 
                                    `<button onclick="endRequest(${req.serviceRequestId})" class="bg-green-500 text-white px-3 py-1 rounded hover:bg-green-600 focus:outline-none">End</button>` : ''}
                                ${req.serviceStatus === "Completed" ? 
                                    `<span class="px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">Completed</span>` : ''}
                            </td>
                        `;
                        tbody.appendChild(row);
                    });
                } catch (error) {
                    console.error('Error loading service requests:', error);
                    document.getElementById('serviceRequestsList').innerHTML = `
                        <tr><td colspan="7" class="text-center py-8 text-red-500">Error loading service requests. Please try again.</td></tr>
                    `;
                }
            }

            function getStatusClass(status) {
                switch (status) {
                    case 'Pending': return 'bg-yellow-100 text-yellow-800';
                    case 'In Progress': return 'bg-blue-100 text-blue-800';
                    case 'Completed': return 'bg-green-100 text-green-800';
                    case 'Assigned': return 'bg-purple-100 text-purple-800';
                    default: return 'bg-gray-100 text-gray-800';
                }
            }

            window.startRequest = async function(id) {
                try {
                    const response = await fetch(`/staff/service-requests/start/${id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert(data.message);
                        loadServiceRequests();
                    } else {
                        alert(data.message || 'Failed to start service request');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while starting the service request');
                }
            };

            window.endRequest = async function(id) {
                try {
                    const response = await fetch(`/staff/service-requests/end/${id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    if (data.success) {
                        alert(data.message);
                        loadServiceRequests();
                    } else {
                        alert(data.message || 'Failed to end service request');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while ending the service request');
                }
            };

            // Initial load
            loadServiceRequests();
        });
    </script>
}
