@model List<Subdivision.Models.Contact>

@{
    ViewData["Title"] = "Contacts";
    ViewData["UserType"] = "Admin";
    ViewData["Page"] = "Contacts";
    Layout = "_UniversalLayout";
}

@if (TempData["Error"] != null)
{
    <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <p class="text-sm text-red-700">@TempData["Error"]</p>
            </div>
        </div>
    </div>
}
else if (TempData["Success"] != null)
{
    <div class="bg-green-50 border-l-4 border-green-500 p-4 mb-6">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <p class="text-sm text-green-700">@TempData["Success"]</p>
            </div>
        </div>
    </div>
}

<div class="space-y-6">
    <div class="flex justify-between items-center">
        <div>
            <h2 class="text-2xl font-bold tracking-tight">Contact Directory</h2>
            <p class="text-muted-foreground">Manage and view all contact information for the community.</p>
        </div>
        <button class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2" onclick="showAddModal()">
            <svg class="mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Add Contact
        </button>
    </div>

    <div class="rounded-lg border bg-card text-card-foreground shadow-sm">
        <div class="p-6">
            <div class="space-y-4">
                @foreach (var contact in Model)
                {
                    <div class="flex items-center justify-between p-4 rounded-lg border bg-background hover:bg-accent/50 transition-colors">
                        <div class="space-y-1">
                            <h3 class="font-medium leading-none">@contact.ContactPersonName</h3>
                            <p class="text-sm text-muted-foreground">@contact.Email</p>
                            <p class="text-sm text-muted-foreground">@contact.PhoneNumber</p>
                        </div>
                        <div class="flex items-center space-x-2">
                            <button onclick="editContact(@contact.ContactId)" class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 w-9 p-0">
                                <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                }
                @if (!Model.Any())
                {
                    <div class="text-center py-6 text-muted-foreground">
                        No contacts found. Add your first contact to get started.
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Contact Modal -->
<div class="modal fade fixed inset-0 z-50 overflow-y-auto hidden" id="contactModal" tabindex="-1" aria-labelledby="contactModalLabel">
    <div class="flex min-h-screen items-center justify-center p-4">
        <div class="fixed inset-0 bg-black/50 transition-opacity" onclick="hideModal()"></div>
        <div class="relative w-full max-w-lg transform rounded-lg border bg-white p-6 shadow-xl transition-all">
            <div class="flex items-center justify-between border-b pb-4">
                <h5 class="text-lg font-semibold" id="contactModalLabel">Add Contact</h5>
                <button type="button" class="rounded-md opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2" onclick="hideModal()">
                    <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="mt-4 bg-gray-50 p-4 rounded-md">
                <form id="contactForm" method="post" action="@Url.Action("CreateContact", "Admin")" class="space-y-4">
                    <input type="hidden" id="contactId" name="ContactId" value="0" />
                    <div class="space-y-2">
                        <label for="contactPersonName">Contact Person</label>
                        <input type="text" id="contactPersonName" name="ContactPersonName" class="flex h-10 w-full rounded-md border px-3">
                    </div>
                    <div class="space-y-2">
                        <label for="phoneNumber">Phone Number</label>
                        <input type="text" id="phoneNumber" name="PhoneNumber" class="flex h-10 w-full rounded-md border px-3">
                    </div>
                    <div class="space-y-2">
                        <label for="email">Email</label>
                        <input type="text" id="email" name="Email" class="flex h-10 w-full rounded-md border px-3">
                    </div>
                    <div class="space-y-2">
                        <label for="category">Category</label>
                        <select id="category" name="Category" class="flex h-10 w-full rounded-md border px-3">
                            <option value="0">HOA Boards</option>
                            <option value="1">Security</option>
                            <option value="2">Fire Department</option>
                            <option value="3">Medical Emergency</option>
                        </select>
                    </div>
                    <div class="flex justify-end space-x-2 pt-4">
                        <button type="button" class="px-4 py-2 border rounded-md hover:bg-gray-100" onclick="hideModal()">Cancel</button>
                        <button type="submit" class="bg-primary text-black px-4 py-2 rounded-md">Save Contact</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    function showAddModal() {
        const modal = document.getElementById('contactModal');
        const form = document.getElementById('contactForm');
        const title = document.getElementById('contactModalLabel');
        
        // Reset form
        form.reset();
        document.getElementById('contactId').value = '0';
        title.textContent = 'Add Contact';
        
        // Show modal
        modal.classList.remove('hidden');
    }

    function hideModal() {
        const modal = document.getElementById('contactModal');
        modal.classList.add('hidden');
    }

    function editContact(contactId) {
        const modal = document.getElementById('contactModal');
        const title = document.getElementById('contactModalLabel');
        const form = document.getElementById('contactForm');
        
        // Update form action for edit
        form.action = '@Url.Action("UpdateContact", "Admin")';
        title.textContent = 'Edit Contact';
        
        // Fetch contact data and populate form
        fetch(`/Admin/GetContact/${contactId}`)
            .then(response => response.json())
            .then(data => {
                document.getElementById('contactId').value = data.contactId;
                document.getElementById('contactPersonName').value = data.contactPersonName;
                document.getElementById('phoneNumber').value = data.phoneNumber;
                document.getElementById('email').value = data.email;
                document.getElementById('category').value = data.category;
                
                // Show modal
                modal.classList.remove('hidden');
            })
            .catch(error => console.error('Error:', error));
    }

    // Close modal when clicking outside
    document.addEventListener('click', function(event) {
        const modal = document.getElementById('contactModal');
        const modalContent = modal.querySelector('.relative');
        
        if (event.target === modal) {
            hideModal();
        }
    });

    // Close modal with escape key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            hideModal();
        }
    });
</script>
}