@{
    ViewData["Title"] = "Events";
    ViewData["UserType"] = "Admin";
    ViewData["Page"] = "Events";
    Layout = "_UniversalLayout";
}

<!-- Add FullCalendar CSS -->
<link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/main.min.css' rel='stylesheet' />

<div class="space-y-6">
    <!-- Header with title and action button -->
    <div class="flex items-center justify-between">
        <h1 class="text-2xl font-semibold text-gray-900">Events</h1>
        <div class="flex space-x-2">
            <button id="testEventBtn" class="inline-flex items-center px-4 py-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 transition-colors">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Test Event
            </button>
            <button id="newEventBtn" class="inline-flex items-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90 transition-colors">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                New Event
            </button>
        </div>
    </div>

    <!-- View Toggle -->
    <div class="bg-white rounded-lg shadow p-4">
        <div class="flex space-x-4">
            <button id="listViewBtn" class="px-4 py-2 text-sm font-medium text-primary border-b-2 border-primary">
                List View
            </button>
            <button id="calendarViewBtn" class="px-4 py-2 text-sm font-medium text-gray-500 hover:text-gray-700">
                Calendar View
            </button>
        </div>
    </div>

    <!-- List View -->
    <div id="listView" class="bg-white rounded-lg shadow overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date & Time</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Visibility</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Organized By</th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="eventsList" class="bg-white divide-y divide-gray-200">
                    <!-- Events will be listed here -->
                </tbody>
            </table>
        </div>
    </div>

    <!-- Calendar View -->
    <div id="calendarView" class="bg-white rounded-lg shadow p-4 hidden">
        <div id="calendar"></div>
    </div>
</div>

<!-- New Event Modal -->
<div id="newEventModal" class="fixed inset-0 z-50 overflow-y-auto hidden">
    <div class="flex min-h-screen items-center justify-center p-4">
        <div class="fixed inset-0 bg-black/50 transition-opacity"></div>
        <div class="relative w-full max-w-lg transform rounded-lg border bg-background p-6 shadow-xl transition-all">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium">Create New Event</h3>
                <button id="closeEventModal" class="text-gray-400 hover:text-gray-500">
                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <form id="newEventForm" class="space-y-4">
                <div>
                    <label for="eventTitle" class="block text-sm font-medium text-gray-700">Title</label>
                    <input type="text" id="eventTitle" name="EventTitle" required
                           class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                </div>
                <div>
                    <label for="eventDesc" class="block text-sm font-medium text-gray-700">Description</label>
                    <textarea id="eventDesc" name="EventDesc" rows="3" required
                              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm"></textarea>
                </div>
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="eventDate" class="block text-sm font-medium text-gray-700">Date</label>
                        <input type="date" id="eventDate" name="EventDate" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                    </div>
                    <div>
                        <label for="eventTime" class="block text-sm font-medium text-gray-700">Time</label>
                        <input type="time" id="eventTime" name="EventTime" required
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                    </div>
                </div>
                <div>
                    <label for="eventVisibility" class="block text-sm font-medium text-gray-700">Visibility</label>
                    <select id="eventVisibility" name="Visibility" required
                            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                            <option value="public">Public</option>
                            <option value="specific">Specific Users</option>
                        </select>
                </div>
                <div class="flex justify-end space-x-3 pt-4">
                    <button type="button" id="cancelEventBtn" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                        Cancel
                    </button>
                    <button type="submit" id="saveEventBtn"
                            class="px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                        Create Event
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Add FullCalendar JS -->
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>

    <script>
        let calendar; // Make calendar accessible globally
        
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('newEventModal');
            const newEventBtn = document.getElementById('newEventBtn');
            const closeEventModal = document.getElementById('closeEventModal');
            const cancelEventBtn = document.getElementById('cancelEventBtn');
            const form = document.getElementById('newEventForm');
            const saveEventBtn = document.getElementById('saveEventBtn');

            function showModal() {
                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            }

            function hideModal() {
                modal.classList.add('hidden');
                document.body.style.overflow = '';
                form.reset();
            }

            newEventBtn.addEventListener('click', showModal);
            closeEventModal.addEventListener('click', hideModal);
            cancelEventBtn.addEventListener('click', hideModal);

            // Close modal when clicking outside
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    hideModal();
                }
            });

            // Close modal on ESC key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
                    hideModal();
                }
            });

            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Disable submit button and show loading state
                saveEventBtn.disabled = true;
                saveEventBtn.innerHTML = `
                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Creating...
                `;

                try {
                    const formData = new FormData(form);
                    const eventDate = formData.get('EventDate');
                    const eventTime = formData.get('EventTime');
                    const eventDateTime = new Date(`${eventDate}T${eventTime}`);

                    const eventData = {
                        EventTitle: formData.get('EventTitle'),
                        EventDesc: formData.get('EventDesc'),
                        EventDateTime: eventDateTime.toISOString(),
                        Visibility: formData.get('Visibility')
                    };

                    const response = await fetch('/admin/events/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(eventData)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Failed to create event');
                    }

                    // Show success message
                    const successMessage = document.createElement('div');
                    successMessage.className = 'fixed top-4 right-4 bg-green-50 border border-green-500 text-green-700 px-4 py-3 rounded-md shadow-lg z-50';
                    successMessage.innerHTML = `
                        <div class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            <span>Event created successfully!</span>
                        </div>
                    `;
                    document.body.appendChild(successMessage);
                    setTimeout(() => successMessage.remove(), 3000);

                    // Hide modal and reload events
                    hideModal();
                    await loadEvents();
                } catch (error) {
                    console.error('Error creating event:', error);
                    
                    // Show error message
                    const errorMessage = document.createElement('div');
                    errorMessage.className = 'fixed top-4 right-4 bg-red-50 border border-red-500 text-red-700 px-4 py-3 rounded-md shadow-lg z-50';
                    errorMessage.innerHTML = `
                        <div class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>Failed to create event: ${error.message}</span>
                        </div>
                    `;
                    document.body.appendChild(errorMessage);
                    setTimeout(() => errorMessage.remove(), 3000);
                } finally {
                    // Reset submit button
                    saveEventBtn.disabled = false;
                    saveEventBtn.innerHTML = 'Create Event';
                }
            });

            // View Toggle
            const listViewBtn = document.getElementById('listViewBtn');
            const calendarViewBtn = document.getElementById('calendarViewBtn');
            const listView = document.getElementById('listView');
            const calendarView = document.getElementById('calendarView');

            function showListView() {
                listView.classList.remove('hidden');
                calendarView.classList.add('hidden');
                listViewBtn.classList.add('text-primary', 'border-b-2', 'border-primary');
                listViewBtn.classList.remove('text-gray-500');
                calendarViewBtn.classList.remove('text-primary', 'border-b-2', 'border-primary');
                calendarViewBtn.classList.add('text-gray-500');
            }

            function showCalendarView() {
                listView.classList.add('hidden');
                calendarView.classList.remove('hidden');
                calendarViewBtn.classList.add('text-primary', 'border-b-2', 'border-primary');
                calendarViewBtn.classList.remove('text-gray-500');
                listViewBtn.classList.remove('text-primary', 'border-b-2', 'border-primary');
                listViewBtn.classList.add('text-gray-500');
                
                // Refresh calendar when switching to calendar view
                if (calendar) {
                    calendar.refetchEvents();
                }
            }

            listViewBtn.addEventListener('click', showListView);
            calendarViewBtn.addEventListener('click', showCalendarView);

            // Initialize FullCalendar with explicit rendering
            const calendarEl = document.getElementById('calendar');
            calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events: function(info, successCallback, failureCallback) {
                    // Direct approach to fetch events
                    const year = new Date().getFullYear();
                    const endpoint = `/admin/events/list?start=${year}-01-01&end=${year}-12-31`;
                    console.log('Fetching events from:', endpoint);
                    
                    fetch(endpoint)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log('Raw events data:', data);
                            
                            // Transform the events for FullCalendar format
                            const calendarEvents = data.map(evt => {
                                console.log('Processing event for calendar:', evt);
                                return {
                                    id: evt.eventId,
                                    title: evt.eventTitle,
                                    start: new Date(evt.eventDateTime),
                                    // Add end time 1 hour after start for better display
                                    end: new Date(new Date(evt.eventDateTime).getTime() + 60 * 60 * 1000),
                                    allDay: false,
                                    backgroundColor: evt.visibility === 'public' ? '#10B981' : '#3B82F6',
                                    borderColor: evt.visibility === 'public' ? '#059669' : '#2563EB',
                                    textColor: '#FFFFFF',
                                    extendedProps: {
                                        description: evt.eventDesc,
                                        visibility: evt.visibility,
                                        organizedBy: evt.organizedBy
                                    }
                                };
                            });
                            
                            console.log('Processed calendar events:', calendarEvents);
                            successCallback(calendarEvents);
                        })
                        .catch(error => {
                            console.error('Error fetching events for calendar:', error);
                            failureCallback(error);
                        });
                },
                eventClick: function(info) {
                    viewEvent(info.event.id);
                },
                dateClick: function(info) {
                    showModal();
                    document.getElementById('eventDate').value = info.dateStr;
                },
                eventTimeFormat: {
                    hour: '2-digit',
                    minute: '2-digit',
                    meridiem: 'short'
                },
                eventDidMount: function(info) {
                    // Create richer tooltips
                    const event = info.event;
                    const tooltipContent = `
                        <div class="p-2">
                            <div class="font-bold">${event.title}</div>
                            <div class="text-sm">${event.extendedProps.description}</div>
                            <div class="text-xs mt-1">Organized by: ${event.extendedProps.organizedBy}</div>
                            <div class="text-xs">Visibility: ${event.extendedProps.visibility}</div>
                        </div>
                    `;
                    
                    // Use title attribute for simple tooltip
                    info.el.title = `${event.title} - ${event.extendedProps.description}`;
                }
            });

            // Make calendar accessible from window object for global access
            window.calendar = calendar;
            
            // Explicitly render the calendar
            calendar.render();
            
            // Force render when tab is switched
            calendarViewBtn.addEventListener('click', function() {
                showCalendarView();
                setTimeout(() => {
                    calendar.updateSize(); // Fix render issues by forcing resize
                }, 10);
            });

            // Update loadEvents function to handle both views
            async function loadEvents() {
                try {
                    console.log('Loading events...'); // Debug log
                    const now = new Date();
                    const startDate = `${now.getFullYear()}-01-01`; // Jan 1 of current year
                    const endDate = `${now.getFullYear()}-12-31`; // Dec 31 of current year
                    
                    console.log(`Fetching events from ${startDate} to ${endDate}`);
                    const response = await fetch(`/admin/events/list?start=${startDate}&end=${endDate}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    
                    const events = await response.json();
                    console.log(`Loaded ${events.length} events:`, events);
                    
                    // Update the list view
                    displayEvents(events);
                    
                    // Update the calendar view if it exists
                    if (window.calendar) {
                        console.log('Refreshing calendar with fetched events');
                        window.calendar.refetchEvents();
                    }
                } catch (error) {
                    console.error('Error loading events:', error);
                    document.getElementById('eventsList').innerHTML = `
                        <tr>
                            <td colspan="6" class="px-6 py-4 text-center text-red-600">
                                <div class="flex items-center justify-center">
                                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                Error loading events. Please try refreshing the page.
                                </div>
                            </td>
                        </tr>
                    `;
                }
            }

            function displayEvents(events) {
                console.log('Displaying events:', events); // Debug log
                const tbody = document.getElementById('eventsList');
                tbody.innerHTML = '';

                if (!events || events.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="6" class="px-6 py-8 text-center text-gray-500">
                                <div class="flex flex-col items-center">
                                    <svg class="w-12 h-12 mb-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    <p class="text-lg font-medium">No events found</p>
                                    <p class="text-sm">Create your first event to get started!</p>
                                </div>
                            </td>
                        </tr>
                    `;
                    return;
                }

                events.forEach(event => {
                    const date = new Date(event.eventDateTime);
                    const formattedDate = date.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                    });

                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-50';
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${event.eventTitle}</td>
                        <td class="px-6 py-4 text-sm text-gray-500 max-w-xs truncate">${event.eventDesc}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formattedDate}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${event.visibility === 'public' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}">
                                ${event.visibility}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${event.organizedBy || 'Admin'}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button onclick="viewEvent(${event.eventId})" class="text-primary hover:text-primary/80 mr-3">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                </svg>
                            </button>
                            <button onclick="deleteEvent(${event.eventId})" class="text-red-600 hover:text-red-800">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                        </td>
                    `;
                    tbody.appendChild(row);
                });
            }

            // Load events on page load
            loadEvents();

            // Test event button
            const testEventBtn = document.getElementById('testEventBtn');
            testEventBtn.addEventListener('click', async function() {
                try {
                    // Create a random test event for the current month
                    const now = new Date();
                    const randomDay = Math.floor(Math.random() * 28) + 1; // Random day between 1-28
                    const randomHour = Math.floor(Math.random() * 12) + 9; // Random hour between 9-20
                    
                    const eventDate = new Date(now.getFullYear(), now.getMonth(), randomDay, randomHour, 0, 0);
                    
                    const testEvent = {
                        EventTitle: `Test Event ${Math.floor(Math.random() * 1000)}`,
                        EventDesc: "This is a test event for debugging purposes",
                        EventDateTime: eventDate.toISOString(),
                        Visibility: Math.random() > 0.5 ? "public" : "specific"
                    };

                    console.log('Creating test event:', testEvent);
                    
                    const response = await fetch('/admin/events/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(testEvent)
                    });

                    if (!response.ok) {
                        throw new Error('Failed to create test event');
                    }

                    const result = await response.json();
                    console.log('Test event created:', result);
                    
                    // Show success message
                    const successMessage = document.createElement('div');
                    successMessage.className = 'fixed top-4 right-4 bg-green-50 border border-green-500 text-green-700 px-4 py-3 rounded-md shadow-lg z-50';
                    successMessage.innerHTML = `
                        <div class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                            </svg>
                            <span>Test event created successfully!</span>
                        </div>
                    `;
                    document.body.appendChild(successMessage);
                    setTimeout(() => successMessage.remove(), 3000);
                    
                    // Refresh both views
                    await loadEvents();
                    
                    // Force calendar refresh
                    if (window.calendar) {
                        console.log('Refreshing calendar after test event creation');
                        window.calendar.refetchEvents();
                    }
                } catch (error) {
                    console.error('Error creating test event:', error);
                    
                    // Show error message
                    const errorMessage = document.createElement('div');
                    errorMessage.className = 'fixed top-4 right-4 bg-red-50 border border-red-500 text-red-700 px-4 py-3 rounded-md shadow-lg z-50';
                    errorMessage.innerHTML = `
                        <div class="flex items-center">
                            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <span>Failed to create test event: ${error.message}</span>
                        </div>
                    `;
                    document.body.appendChild(errorMessage);
                    setTimeout(() => errorMessage.remove(), 3000);
                }
            });
        });

        async function viewEvent(eventId) {
            console.log('Viewing event:', eventId);
            try {
                const response = await fetch(`/admin/events/${eventId}`);
                if (!response.ok) {
                    throw new Error('Failed to fetch event details');
                }
                
                const event = await response.json();
                console.log('Event details:', event);
                
                // Create and show a modal with event details
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 z-50 overflow-y-auto';
                modal.innerHTML = `
                    <div class="flex min-h-screen items-center justify-center p-4">
                        <div class="fixed inset-0 bg-black/50 transition-opacity"></div>
                        <div class="relative w-full max-w-lg transform rounded-lg border bg-background p-6 shadow-xl transition-all">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-medium">${event.eventTitle}</h3>
                                <button id="closeEventDetailsModal" class="text-gray-400 hover:text-gray-500">
                                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </button>
                            </div>
                            <div class="space-y-4">
                                <div>
                                    <h4 class="text-sm font-medium text-gray-500">Description</h4>
                                    <p class="mt-1 text-sm text-gray-900">${event.eventDesc}</p>
                                </div>
                                <div>
                                    <h4 class="text-sm font-medium text-gray-500">Date & Time</h4>
                                    <p class="mt-1 text-sm text-gray-900">${new Date(event.eventDateTime).toLocaleString()}</p>
                                </div>
                                <div>
                                    <h4 class="text-sm font-medium text-gray-500">Visibility</h4>
                                    <p class="mt-1 text-sm text-gray-900">
                                        <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${event.visibility === 'public' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}">
                                            ${event.visibility}
                                        </span>
                                    </p>
                                </div>
                                <div>
                                    <h4 class="text-sm font-medium text-gray-500">Organized By</h4>
                                    <p class="mt-1 text-sm text-gray-900">${event.organizedBy || 'Admin'}</p>
                                </div>
                            </div>
                            <div class="mt-6 flex justify-end space-x-3">
                                <button id="editEventBtn" class="px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                                    Edit Event
                                </button>
                                <button id="closeEventDetailsBtn" class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                                    Close
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
                
                // Add event listeners
                const closeBtn = document.getElementById('closeEventDetailsBtn');
                const closeIcon = document.getElementById('closeEventDetailsModal');
                const editBtn = document.getElementById('editEventBtn');
                
                closeBtn.addEventListener('click', () => {
                    modal.remove();
                });
                
                closeIcon.addEventListener('click', () => {
                    modal.remove();
                });
                
                editBtn.addEventListener('click', () => {
                    // TODO: Implement edit functionality
                    alert('Edit functionality coming soon');
                    modal.remove();
                });
                
                // Close modal when clicking outside
                modal.addEventListener('click', function(e) {
                    if (e.target === modal) {
                        modal.remove();
                    }
                });
                
                // Close modal on ESC key
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        modal.remove();
                    }
                });
            } catch (error) {
                console.error('Error fetching event details:', error);
                
                // Show error message
                const errorMessage = document.createElement('div');
                errorMessage.className = 'fixed top-4 right-4 bg-red-50 border border-red-500 text-red-700 px-4 py-3 rounded-md shadow-lg z-50';
                errorMessage.innerHTML = `
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <span>Failed to load event details: ${error.message}</span>
                    </div>
                `;
                document.body.appendChild(errorMessage);
                setTimeout(() => errorMessage.remove(), 3000);
            }
        }

        async function deleteEvent(eventId) {
            if (!confirm('Are you sure you want to delete this event?')) return;

            try {
                const response = await fetch(`/admin/events/${eventId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    throw new Error('Failed to delete event');
                }

                // Show success message
                const successMessage = document.createElement('div');
                successMessage.className = 'fixed top-4 right-4 bg-green-50 border border-green-500 text-green-700 px-4 py-3 rounded-md shadow-lg z-50';
                successMessage.innerHTML = `
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        <span>Event deleted successfully!</span>
                    </div>
                `;
                document.body.appendChild(successMessage);
                setTimeout(() => successMessage.remove(), 3000);

                // Reload the events
                await loadEvents();
                
                // For calendar view, specifically force a refresh
                if (window.calendar) {
                    window.calendar.refetchEvents();
                }
            } catch (error) {
                console.error('Error deleting event:', error);
                
                // Show error message
                const errorMessage = document.createElement('div');
                errorMessage.className = 'fixed top-4 right-4 bg-red-50 border border-red-500 text-red-700 px-4 py-3 rounded-md shadow-lg z-50';
                errorMessage.innerHTML = `
                    <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <span>Failed to delete event: ${error.message}</span>
                    </div>
                `;
                document.body.appendChild(errorMessage);
                setTimeout(() => errorMessage.remove(), 3000);
            }
        }
    </script>
} 