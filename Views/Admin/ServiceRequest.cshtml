@model List<Subdivision.Models.ServiceRequest>

@{
    ViewData["Title"] = "Service Request";
    ViewData["UserType"] = "Admin";
    ViewData["Page"] = "ServiceRequest";
    Layout = "_UniversalLayout";
}

<div class="container-fluid py-4">
    <div class="mb-6">
        <h2 class="text-2xl font-bold text-gray-900">Service Request Management</h2>
        <p class="text-gray-500">Manage and assign service requests from homeowners</p>
    </div>

    <div class="bg-white shadow-md rounded-lg p-6">
        <div class="flex justify-between items-center mb-6">
            <div>
                <h3 class="text-xl font-semibold text-gray-800">Service Requests</h3>
            </div>
            <div class="flex space-x-4">
                <select id="status-filter" class="border border-gray-300 rounded-md px-3 py-2">
                    <option value="all">All</option>
                    <option value="Pending">Pending</option>
                    <option value="In Progress">In Progress</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
                <select id="priority-filter" class="border border-gray-300 rounded-md px-3 py-2">
                    <option value="all">All Priorities</option>
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                    <option value="Emergency">Emergency</option>
                </select>
            </div>
        </div>

        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Homeowner</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Priority</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Staff</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody id="requests-table" class="bg-white divide-y divide-gray-200">
                    @foreach (var request in Model)
                    {
                        <tr>
                            <td>@request.ServiceRequestId</td>
                            <td>@request.Homeowner?.User?.FirstName @request.Homeowner?.User?.LastName</td>
                            <td>@request.RequestType</td>
                            <td>@request.Priority</td>
                            <td>@request.RequestDateTime.ToString("g")</td>
                            <td>@request.ServiceStatus</td>
                            <td>@(request.Staff != null ? request.Staff.User.FirstName + " " + request.Staff.User.LastName : "Unassigned")</td>
                            <td>
                                @if (request.ServiceStatus == "Completed")
                                {
                                    <span class="badge bg-success">Completed</span>
                                }
                                else
                                {
                                    <button class="btn btn-primary" onclick="assignStaff(@request.ServiceRequestId)">Assign</button>
                                    <button class="btn btn-warning" onclick="editRequest(@request.ServiceRequestId)">Edit</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Request Detail Modal -->
<div id="detail-modal" class="fixed inset-0 overflow-y-auto hidden" aria-labelledby="detail-modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="detail-modal-title">
                            Request Details
                        </h3>
                        <div class="mt-4">
                            <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 rounded-md">
                                <dt class="text-sm font-medium text-gray-500">Request Type</dt>
                                <dd id="detail-type" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt class="text-sm font-medium text-gray-500">Homeowner</dt>
                                <dd id="detail-homeowner" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 rounded-md">
                                <dt class="text-sm font-medium text-gray-500">Priority</dt>
                                <dd id="detail-priority" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt class="text-sm font-medium text-gray-500">Status</dt>
                                <dd id="detail-status" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 rounded-md">
                                <dt class="text-sm font-medium text-gray-500">Date Submitted</dt>
                                <dd id="detail-date" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-white px-4 py-5 sm:px-6">
                                <dt class="text-sm font-medium text-gray-500 mb-2">Description</dt>
                                <dd id="detail-description" class="mt-1 text-sm text-gray-900"></dd>
                            </div>
                            <div id="recommended-staff-section" class="bg-gray-50 px-4 py-5 sm:px-6 rounded-md">
                                <dt class="text-sm font-medium text-gray-500 mb-2">Recommended Staff Type</dt>
                                <dd id="recommended-staff-type" class="mt-1 px-2 py-1 inline-flex text-sm font-medium rounded-md bg-blue-100 text-blue-800"></dd>
                            </div>
                            <div id="staff-assign-section" class="bg-white px-4 py-5 sm:px-6">
                                <dt class="text-sm font-medium text-gray-500 mb-2">Assign Staff</dt>
                                <div class="flex space-x-2 mb-2">
                                    <button id="show-all-staff" class="px-2 py-1 text-xs font-medium rounded bg-gray-200 hover:bg-gray-300">All Staff</button>
                                    <button id="show-recommended-staff" class="px-2 py-1 text-xs font-medium rounded bg-blue-100 hover:bg-blue-200">Recommended Staff</button>
                                </div>
                                <select id="staff-select" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="">Select staff member</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" id="update-status-btn" class="ml-3 inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:text-sm">
                    Update Status
                </button>
                <button type="button" id="assign-staff-btn" class="ml-3 inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:text-sm">
                    Assign Staff
                </button>
                <button type="button" id="detail-close-btn" class="inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Status Update Modal -->
<div id="status-modal" class="fixed inset-0 overflow-y-auto hidden" aria-labelledby="status-modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="status-modal-title">
                            Update Request Status
                        </h3>
                        <div class="mt-4">
                            <div class="bg-white px-4 py-5 sm:px-6">
                                <label for="status-select" class="block text-sm font-medium text-gray-700">New Status</label>
                                <select id="status-select" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                                    <option value="Pending">Pending</option>
                                    <option value="In Progress">In Progress</option>
                                    <option value="Completed">Completed</option>
                                    <option value="Cancelled">Cancelled</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" id="save-status-btn" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-green-600 text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 sm:ml-3 sm:w-auto sm:text-sm">
                    Save
                </button>
                <button type="button" id="cancel-status-btn" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const requestsTable = document.getElementById('requests-table');
            const detailModal = document.getElementById('detail-modal');
            const detailCloseBtn = document.getElementById('detail-close-btn');
            const updateStatusBtn = document.getElementById('update-status-btn');
            const assignStaffBtn = document.getElementById('assign-staff-btn');
            const statusModal = document.getElementById('status-modal');
            const saveStatusBtn = document.getElementById('save-status-btn');
            const cancelStatusBtn = document.getElementById('cancel-status-btn');
            const statusFilter = document.getElementById('status-filter');
            const priorityFilter = document.getElementById('priority-filter');
            const showAllStaffBtn = document.getElementById('show-all-staff');
            const showRecommendedStaffBtn = document.getElementById('show-recommended-staff');
            
            let serviceRequests = [];
            let staffMembers = [];
            let currentRequestId = null;
            let currentRequestType = null;
            
            // Event Listeners
            detailCloseBtn.addEventListener('click', closeDetailModal);
            updateStatusBtn.addEventListener('click', openStatusModal);
            cancelStatusBtn.addEventListener('click', closeStatusModal);
            saveStatusBtn.addEventListener('click', updateRequestStatus);
            assignStaffBtn.addEventListener('click', assignStaffToRequest);
            
            statusFilter.addEventListener('change', filterRequests);
            priorityFilter.addEventListener('change', filterRequests);
            
            showAllStaffBtn.addEventListener('click', () => showStaffOptions('all'));
            showRecommendedStaffBtn.addEventListener('click', () => showStaffOptions('recommended'));
            
            // Functions
            function closeDetailModal() {
                detailModal.classList.add('hidden');
            }
            
            function openStatusModal() {
                statusModal.classList.remove('hidden');
                
                // Set current status as selected
                const currentStatus = document.getElementById('detail-status').textContent.trim();
                document.getElementById('status-select').value = currentStatus;
            }
            
            function closeStatusModal() {
                statusModal.classList.add('hidden');
            }
            
            function formatDate(dateString) {
                const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
                return new Date(dateString).toLocaleDateString(undefined, options);
            }
            
            function getStatusColorClass(status) {
                switch (status) {
                    case 'Pending':
                        return 'bg-yellow-100 text-yellow-800';
                    case 'In Progress':
                        return 'bg-blue-100 text-blue-800';
                    case 'Completed':
                        return 'bg-green-100 text-green-800';
                    case 'Cancelled':
                        return 'bg-red-100 text-red-800';
                    case 'Assigned':
                        return 'bg-purple-100 text-purple-800';
                    default:
                        return 'bg-gray-100 text-gray-800';
                }
            }
            
            function renderRequests(requests) {
                if (requests.length === 0) {
                    requestsTable.innerHTML = `
                        <tr>
                            <td colspan="8" class="px-6 py-4 text-center text-gray-500">
                                No service requests found.
                            </td>
                        </tr>
                    `;
                    return;
                }
                
                requestsTable.innerHTML = '';
                
                requests.forEach(request => {
                    const row = document.createElement('tr');
                    const statusClass = getStatusColorClass(request.serviceStatus);
                    
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${request.serviceRequestId}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${request.homeownerName}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${request.requestType}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${request.priority}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatDate(request.requestDateTime)}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass}">
                                ${request.serviceStatus}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            ${request.staffName || '-'}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            <button class="text-blue-600 hover:text-blue-900 view-details" data-id="${request.serviceRequestId}">View</button>
                        </td>
                    `;
                    
                    requestsTable.appendChild(row);
                });
                
                // Add event listeners to view buttons
                document.querySelectorAll('.view-details').forEach(button => {
                    button.addEventListener('click', () => {
                        const requestId = button.getAttribute('data-id');
                        showRequestDetails(requestId);
                    });
                });
            }
            
            function determineRecommendedStaffType(requestType) {
                // Map request types to staff positions
                const requestTypeMap = {
                    'Maintenance': 'Maintenance',
                    'Housekeeping': 'Housekeeping',
                    'Security': 'Security',
                    // Add more mappings as needed
                };
                
                // Default to Maintenance if type not recognized
                return requestTypeMap[requestType] || 'Maintenance';
            }
            
            function showRequestDetails(requestId) {
                currentRequestId = requestId;
                
                const request = serviceRequests.find(r => r.serviceRequestId == requestId);
                if (!request) return;
                
                document.getElementById('detail-type').textContent = request.requestType;
                document.getElementById('detail-homeowner').textContent = request.homeownerName;
                document.getElementById('detail-priority').textContent = request.priority;
                
                const statusEl = document.getElementById('detail-status');
                statusEl.textContent = request.serviceStatus;
                statusEl.className = `mt-1 text-sm sm:mt-0 sm:col-span-2 ${getStatusColorClass(request.serviceStatus)}`;
                statusEl.style.padding = '2px 8px';
                statusEl.style.borderRadius = '9999px';
                statusEl.style.display = 'inline-block';
                
                document.getElementById('detail-date').textContent = formatDate(request.requestDateTime);
                document.getElementById('detail-description').textContent = request.description;
                
                // Set recommended staff type
                currentRequestType = request.requestType;
                const recommendedStaffType = determineRecommendedStaffType(request.requestType);
                const recommendedEl = document.getElementById('recommended-staff-type');
                recommendedEl.textContent = recommendedStaffType;
                
                // Populate staff dropdown with recommended staff first
                populateStaffDropdown(recommendedStaffType, request.staffId);
                
                // Disable assign button if request is cancelled
                assignStaffBtn.disabled = request.serviceStatus === 'Cancelled';
                assignStaffBtn.classList.toggle('opacity-50', request.serviceStatus === 'Cancelled');
                
                detailModal.classList.remove('hidden');
            }
            
            function populateStaffDropdown(recommendedPosition = null, selectedStaffId = null) {
                const staffSelect = document.getElementById('staff-select');
                staffSelect.innerHTML = '<option value="">Select staff member</option>';
                
                // Function to add staff options
                const addStaffOptions = (staffList) => {
                    staffList.forEach(staff => {
                        const option = document.createElement('option');
                        option.value = staff.staffId;
                        option.textContent = `${staff.name} (${staff.position})`;
                        
                        // Select current staff if assigned
                        if (selectedStaffId && staff.staffId == selectedStaffId) {
                            option.selected = true;
                        }
                        
                        staffSelect.appendChild(option);
                    });
                };
                
                // If recommended position, sort staff of that position first
                if (recommendedPosition) {
                    const recommendedStaff = staffMembers.filter(s => s.position === recommendedPosition);
                    const otherStaff = staffMembers.filter(s => s.position !== recommendedPosition);
                    
                    if (recommendedStaff.length > 0) {
                        const recommendedGroup = document.createElement('optgroup');
                        recommendedGroup.label = `Recommended (${recommendedPosition})`;
                        staffSelect.appendChild(recommendedGroup);
                        
                        addStaffOptions(recommendedStaff);
                    }
                    
                    if (otherStaff.length > 0) {
                        const otherGroup = document.createElement('optgroup');
                        otherGroup.label = 'Other Staff';
                        staffSelect.appendChild(otherGroup);
                        
                        addStaffOptions(otherStaff);
                    }
                } else {
                    // Just add all staff
                    addStaffOptions(staffMembers);
                }
                
                // Highlight the show recommended staff button
                showRecommendedStaffBtn.classList.add('bg-blue-200');
                showAllStaffBtn.classList.remove('bg-gray-300');
            }
            
            function showStaffOptions(type) {
                if (type === 'recommended') {
                    const recommendedStaffType = determineRecommendedStaffType(currentRequestType);
                    populateStaffDropdown(recommendedStaffType);
                    
                    showRecommendedStaffBtn.classList.add('bg-blue-200');
                    showAllStaffBtn.classList.remove('bg-gray-300');
                } else {
                    // Get current selected staff ID
                    const staffSelect = document.getElementById('staff-select');
                    const selectedStaffId = staffSelect.value;
                    
                    // Show all staff
                    staffSelect.innerHTML = '<option value="">Select staff member</option>';
                    staffMembers.forEach(staff => {
                        const option = document.createElement('option');
                        option.value = staff.staffId;
                        option.textContent = `${staff.name} (${staff.position})`;
                        
                        if (selectedStaffId && staff.staffId == selectedStaffId) {
                            option.selected = true;
                        }
                        
                        staffSelect.appendChild(option);
                    });
                    
                    showAllStaffBtn.classList.add('bg-gray-300');
                    showRecommendedStaffBtn.classList.remove('bg-blue-200');
                }
            }
            
            function filterRequests() {
                const statusValue = statusFilter.value;
                const priorityValue = priorityFilter.value;
                
                let filtered = [...serviceRequests];
                
                if (statusValue !== 'all') {
                    filtered = filtered.filter(request => request.serviceStatus === statusValue);
                }
                
                if (priorityValue !== 'all') {
                    filtered = filtered.filter(request => request.priority === priorityValue);
                }
                
                renderRequests(filtered);
            }
            
            async function updateRequestStatus() {
                if (!currentRequestId) return;
                
                const newStatus = document.getElementById('status-select').value;
                
                try {
                    const response = await fetch(`/admin/service-requests/${currentRequestId}/status`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ status: newStatus })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        closeStatusModal();
                        closeDetailModal();
                        fetchServiceRequests();
                        alert('Request status updated successfully!');
                    } else {
                        alert('Failed to update request status: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while updating the request status. Please try again.');
                }
            }
            
            async function assignStaffToRequest() {
                if (!currentRequestId) return;
                
                const staffId = document.getElementById('staff-select').value;
                if (!staffId) {
                    alert('Please select a staff member to assign.');
                    return;
                }
                
                try {
                    const response = await fetch(`/admin/service-requests/${currentRequestId}/assign`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ staffId: staffId })
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        closeDetailModal();
                        fetchServiceRequests();
                        alert('Staff assigned successfully!');
                    } else {
                        alert('Failed to assign staff: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while assigning staff. Please try again.');
                }
            }
            
            async function fetchServiceRequests() {
                try {
                    const response = await fetch('/admin/service-requests/list');
                    const result = await response.json();
                    
                    if (result.success) {
                        serviceRequests = result.requests;
                        filterRequests();
                    } else {
                        console.error('Failed to fetch service requests:', result.message);
                        requestsTable.innerHTML = `
                            <tr>
                                <td colspan="8" class="px-6 py-4 text-center text-red-500">
                                    Failed to load service requests.
                                </td>
                            </tr>
                        `;
                    }
                } catch (error) {
                    console.error('Error:', error);
                    requestsTable.innerHTML = `
                        <tr>
                            <td colspan="8" class="px-6 py-4 text-center text-red-500">
                                An error occurred while loading service requests.
                            </td>
                        </tr>
                    `;
                }
            }
            
            async function fetchStaffMembers() {
                try {
                    const response = await fetch('/admin/staff/list');
                    const result = await response.json();
                    
                    if (result.success) {
                        staffMembers = result.staff;
                    } else {
                        console.error('Failed to fetch staff members:', result.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            }
            
            // Initialize
            fetchServiceRequests();
            fetchStaffMembers();
        });
    </script>
}