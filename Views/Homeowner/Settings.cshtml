@model Subdivision.Models.User

@{
    ViewData["Title"] = "Settings";
    ViewData["UserType"] = "Homeowner";
    ViewData["Page"] = "Settings";
    Layout = "_UniversalLayout";
}

<div class="space-y-6 p-4">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-semibold text-gray-900">Settings</h1>
            <p class="mt-1 text-sm text-gray-500">Configure your personal information and change your password.</p>
        </div>
    </div>

    <!-- Alert Messages -->
    <div id="alertContainer"></div>

    <div class="bg-white rounded-lg shadow">
        <div class="p-6">
            <form id="settingsForm" method="post" action="/homeowner/settings/update" enctype="multipart/form-data" class="space-y-6">
                <input type="hidden" name="LoginId" value="@Model.LoginId" />
                
                <!-- Profile Photo Section -->
                <div class="space-y-2">
                    <h3 class="text-lg font-medium text-gray-900">Profile Photo</h3>
                    <div class="flex items-center space-x-4">
                        <div class="relative">
                            <img id="currentPhoto" src="@(string.IsNullOrEmpty(Model.Image) ? "/images/default-avatar.png" : Model.Image)" 
                                 alt="Profile photo" 
                                 class="h-20 w-20 rounded-full object-cover border border-gray-200">
                            <button type="button" id="removePhoto" class="absolute -top-1 -right-1 bg-white rounded-full p-1 shadow-sm hover:bg-gray-50 @(string.IsNullOrEmpty(Model.Image) ? "hidden" : "")" title="Remove photo">
                                <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>
                        <div class="flex flex-col space-y-2">
                            <label class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none cursor-pointer">
                                <svg class="w-5 h-5 mr-2 -ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                </svg>
                                Upload Photo
                                <input type="file" id="photo" name="Photo" accept="image/*" class="hidden">
                            </label>
                            <p class="text-xs text-gray-500">JPG, PNG or GIF up to 2MB</p>
                        </div>
                    </div>
                </div>

                <div class="border-t border-gray-200 pt-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Personal Information</h3>
                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                        <div>
                            <label for="firstName" class="block text-sm font-medium text-gray-700">First Name</label>
                            <input type="text" id="firstName" name="FirstName" value="@Model.FirstName" required
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                        </div>
                        <div>
                            <label for="lastName" class="block text-sm font-medium text-gray-700">Last Name</label>
                            <input type="text" id="lastName" name="LastName" value="@Model.LastName" required
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                        </div>
                        <div class="sm:col-span-2">
                            <label for="address" class="block text-sm font-medium text-gray-700">Address</label>
                            <input type="text" id="address" name="Address" value="@Model.Address" required
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                        </div>
                        <div>
                            <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                            <input type="email" id="email" name="Email" value="@Model.Email" required
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                        </div>
                        <div>
                            <label for="phoneNumber" class="block text-sm font-medium text-gray-700">Phone Number</label>
                            <input type="tel" id="phoneNumber" name="PhoneNumber" value="@Model.PhoneNumber" required
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                        </div>
                </div>
                </div>

                <div class="border-t border-gray-200 pt-6">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Change Password</h3>
                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                        <div>
                            <label for="newPassword" class="block text-sm font-medium text-gray-700">New Password</label>
                            <input type="password" id="newPassword" name="newPassword" minlength="6"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                            <p class="mt-1 text-xs text-gray-500">Leave blank to keep current password</p>
                </div>
                        <div>
                            <label for="confirmPassword" class="block text-sm font-medium text-gray-700">Confirm Password</label>
                            <input type="password" id="confirmPassword" name="confirmPassword" minlength="6"
                                   class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring-primary sm:text-sm">
                </div>
                </div>
                </div>

                <div class="flex justify-end space-x-3 border-t border-gray-200 pt-6">
                    <button type="button" onclick="location.href='/homeowner/dashboard'" 
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                        Cancel
                    </button>
                    <button type="submit" id="saveButton"
                            class="px-4 py-2 text-sm font-medium text-white bg-primary rounded-md hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                        Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('settingsForm');
            const saveButton = document.getElementById('saveButton');
            const photoInput = document.getElementById('photo');
            const currentPhoto = document.getElementById('currentPhoto');
            const removePhotoBtn = document.getElementById('removePhoto');
            const alertContainer = document.getElementById('alertContainer');

            // Show alert message
            function showAlert(message, type = 'success') {
                const alert = document.createElement('div');
                alert.className = `rounded-md p-4 mb-4 ${type === 'success' ? 'bg-green-50 text-green-800' : 'bg-red-50 text-red-800'}`;
                alert.innerHTML = `
                    <div class="flex">
                        <div class="flex-shrink-0">
                            ${type === 'success' 
                                ? '<svg class="h-5 w-5 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>'
                                : '<svg class="h-5 w-5 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>'}
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium">${message}</p>
                        </div>
                        <div class="ml-auto pl-3">
                            <div class="-mx-1.5 -my-1.5">
                                <button type="button" onclick="this.parentElement.parentElement.parentElement.remove()" class="inline-flex rounded-md p-1.5 ${type === 'success' ? 'text-green-500 hover:bg-green-100' : 'text-red-500 hover:bg-red-100'} focus:outline-none">
                                    <span class="sr-only">Dismiss</span>
                                    <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/></svg>
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                alertContainer.appendChild(alert);
                setTimeout(() => alert.remove(), 5000);
            }

            // Handle photo preview
            photoInput.addEventListener('change', function(e) {
                if (this.files && this.files[0]) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        currentPhoto.src = e.target.result;
                        removePhotoBtn.classList.remove('hidden');
                    };
                    reader.readAsDataURL(this.files[0]);
                }
            });

            // Handle photo removal
            removePhotoBtn.addEventListener('click', function() {
                currentPhoto.src = '/images/default-avatar.png';
                photoInput.value = '';
                this.classList.add('hidden');
            });

            // Form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();

            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (newPassword && newPassword !== confirmPassword) {
                    showAlert('Passwords do not match!', 'error');
                    return;
                }

                saveButton.disabled = true;
                saveButton.innerHTML = `
                    <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline-block" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Saving...
                `;

                try {
                    const formData = new FormData(form);
                    const response = await fetch(form.action, {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showAlert('Settings updated successfully!');
                    } else {
                        throw new Error(result.message || 'Failed to update settings');
                    }
                } catch (error) {
                    showAlert(error.message, 'error');
                } finally {
                    saveButton.disabled = false;
                    saveButton.textContent = 'Save Changes';
                }
            });

            // Show initial alerts from TempData
            @if (TempData["Success"] != null)
            {
                <text>showAlert('@TempData["Success"]');</text>
            }
            @if (TempData["Error"] != null)
            {
                <text>showAlert('@TempData["Error"]', 'error');</text>
            }
        });
    </script>
}

@section Styles {
    <style>
        input[type="file"] {
            width: 0.1px;
            height: 0.1px;
            opacity: 0;
            overflow: hidden;
            position: absolute;
            z-index: -1;
        }
    </style>
} 