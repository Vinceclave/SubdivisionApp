@{
    ViewData["Title"] = "My Reservations";
}

@section Styles {
    <style>
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            display: inline-block;
        }
        .status-pending {
            background-color: #fef9c3;
            color: #854d0e;
        }
        .status-confirmed {
            background-color: #dbeafe;
            color: #1e40af;
        }
        .status-cancelled {
            background-color: #fee2e2;
            color: #b91c1c;
        }
        .status-rejected {
            background-color: #f3f4f6;
            color: #6b7280;
        }
        .status-completed {
            background-color: #dcfce7;
            color: #166534;
        }
        .facility-card {
            transition: all 0.3s ease;
        }
        .facility-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .status-available {
            background-color: #dcfce7;
            color: #166534;
        }
        .status-maintenance {
            background-color: #f3f4f6;
            color: #6b7280;
        }
        .status-full {
            background-color: #fee2e2;
            color: #b91c1c;
        }
        .nav-tab {
            cursor: pointer;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem 0.25rem 0 0;
            font-weight: 500;
        }
        .nav-tab-active {
            background-color: white;
            border-bottom: 2px solid #4f46e5;
            color: #4f46e5;
        }
        /* Custom input styles */
        #modal-date,
        #modal-time-in,
        #modal-time-out {
            background-color: transparent;
        }
    </style>
}

<div class="bg-white shadow-sm rounded-lg p-6">
    <h1 class="text-2xl font-bold text-gray-900 mb-6">MY RESERVATIONS</h1>

    <!-- All Facilities Section -->
    <div class="mb-8">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold text-gray-900">AVAILABLE FACILITIES</h2>
            <div class="flex items-center space-x-2">
                <input type="date" id="reservation-date" class="rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            </div>
        </div>
        
        <div class="flex space-x-1 border-b border-gray-200 w-full mb-6">
            <div id="all-tab" class="nav-tab nav-tab-active">All Facilities</div>
            <div id="recreation-tab" class="nav-tab">Recreation</div>
            <div id="meeting-tab" class="nav-tab">Meeting Rooms</div>
            <div id="outdoor-tab" class="nav-tab">Outdoor Spaces</div>
            <div id="event-tab" class="nav-tab">Event Halls</div>
        </div>

        <div id="facilities-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Facilities will be loaded here -->
            <div class="text-center py-12 col-span-full">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
                <p class="text-gray-500">Loading facilities...</p>
            </div>
        </div>
    </div>

    <h2 class="text-xl font-bold text-gray-900 mb-4">MY CURRENT RESERVATIONS</h2>

    <div class="mb-6">
        <div class="flex flex-col md:flex-row md:items-center justify-between gap-4">
            <div class="flex items-center space-x-2">
                <div>
                    <label for="status-filter" class="block text-sm font-medium text-gray-700 mr-2">Filter by Status:</label>
                    <select id="status-filter" class="rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                        <option value="all">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Rejected">Rejected</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                <div>
                    <label for="date-filter" class="block text-sm font-medium text-gray-700 mr-2">Filter by Date:</label>
                    <input type="date" id="date-filter" class="rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                </div>
            </div>
            <div class="relative flex-1 max-w-md">
                <input type="text" id="search-input" placeholder="Search by facility name..." 
                       class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 pl-10">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                    </svg>
                </div>
            </div>
        </div>
    </div>

    <div class="overflow-hidden rounded-lg border border-gray-200">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Facility
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Date
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Time
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Capacity
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Status
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody id="reservations-tbody" class="bg-white divide-y divide-gray-200">
                    <!-- Loading spinner -->
                    <tr>
                        <td colspan="6" class="px-6 py-12 text-center">
                            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
                            <p class="text-gray-500">Loading your reservations...</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    
    <div id="pagination" class="mt-6 flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
        <div class="flex flex-1 justify-between sm:hidden">
            <button id="mobile-prev-page" class="relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">Previous</button>
            <button id="mobile-next-page" class="relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50">Next</button>
        </div>
        <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
            <div>
                <p id="pagination-info" class="text-sm text-gray-700">Showing <span id="page-start">1</span> to <span id="page-end">10</span> of <span id="total-items">0</span> reservations</p>
            </div>
            <div>
                <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                    <button id="prev-page" class="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                        <span class="sr-only">Previous</span>
                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clip-rule="evenodd" />
                        </svg>
                    </button>
                    <div id="page-buttons" class="flex">
                        <!-- Page buttons will be generated here -->
                    </div>
                    <button id="next-page" class="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0">
                        <span class="sr-only">Next</span>
                        <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                            <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Reservation Modal -->
<div id="reservation-modal" class="fixed inset-0 z-50 hidden overflow-auto bg-gray-800 bg-opacity-50 flex justify-center items-start pt-10 transition-opacity duration-300 ease-in-out">
    <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 overflow-hidden relative transform transition-transform duration-300 ease-in-out scale-95">
        <div class="absolute top-4 right-4">
            <button id="close-modal" class="text-gray-400 hover:text-gray-600">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>

        <div class="p-6">
            <h2 class="text-2xl font-bold text-gray-900 mb-4" id="modal-facility-name">Swimming Pool</h2>
            
            <div class="mb-6">
                <h3 class="text-lg font-semibold text-gray-800 mb-4">My Reservation Details</h3>
                
                <div class="space-y-4">
                    <div class="flex items-start">
                        <div class="flex-shrink-0 w-8 h-8 flex items-center justify-center mt-1">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <span class="block text-sm font-medium text-gray-900" id="modal-facility-location">123/block st.</span>
                        </div>
                    </div>
                    
                    <div class="flex items-start">
                        <div class="flex-shrink-0 w-8 h-8 flex items-center justify-center mt-1">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <span class="block text-sm font-medium text-gray-900">
                                <input type="date" id="modal-date" class="border-0 p-0 focus:ring-0 text-sm font-medium text-gray-900 bg-transparent">
                            </span>
                        </div>
                    </div>
                    
                    <div class="flex items-start">
                        <div class="flex-shrink-0 w-8 h-8 flex items-center justify-center mt-1">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <span class="block text-sm font-medium text-gray-900 flex items-center">
                                <input type="time" id="modal-time-in" class="border-0 p-0 focus:ring-0 text-sm font-medium text-gray-900 w-20 bg-transparent"> 
                                <span class="mx-2">-</span> 
                                <input type="time" id="modal-time-out" class="border-0 p-0 focus:ring-0 text-sm font-medium text-gray-900 w-20 bg-transparent">
                            </span>
                        </div>
                    </div>
                    
                    <div class="flex items-start">
                        <div class="flex-shrink-0 w-8 h-8 flex items-center justify-center mt-1">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <div class="flex items-center">
                                <input type="number" id="modal-capacity" min="1" class="w-16 border-gray-300 rounded-md shadow-sm text-sm">
                                <span class="ml-2 text-sm text-gray-500" id="modal-max-capacity">(Maximum: 50 people)</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex flex-col md:flex-row md:items-center">
                <img id="modal-facility-img" class="w-full md:w-1/2 h-48 object-cover rounded-lg mb-4 md:mb-0 md:mr-4" src="" alt="Facility image">
                
                <div class="md:w-1/2">
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Working Hours</h3>
                    <div class="grid grid-cols-2 gap-2 mb-4">
                        <div class="bg-gray-100 rounded p-2">
                            <span class="text-xs text-gray-500 block">MON - FRI</span>
                            <span class="text-sm font-medium" id="modal-weekday-hours">9:00 AM - 10:00 PM</span>
                        </div>
                        <div class="bg-gray-100 rounded p-2">
                            <span class="text-xs text-gray-500 block">SAT - SUN</span>
                            <span class="text-sm font-medium" id="modal-weekend-hours">9:00 AM - 8:00 PM</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-6">
                <h3 class="text-lg font-medium text-gray-900 mb-2">Rules & Regulations</h3>
                <div id="modal-rules" class="text-sm text-gray-600 space-y-2 bg-gray-50 p-4 rounded-lg max-h-48 overflow-y-auto">
                    <!-- Rules content will be inserted here -->
                </div>
            </div>

            <div class="mt-6 flex justify-end space-x-3">
                <button id="modal-reserve" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    RESERVE
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Global variables
        let allReservations = [];
        let filteredReservations = [];
        let facilities = [];
        let currentFacilityId = null;
        let currentFilter = 'all';
        const itemsPerPage = 10;
        let currentPage = 1;

        // DOM elements
        const reservationsTbody = document.getElementById('reservations-tbody');
        const statusFilter = document.getElementById('status-filter');
        const dateFilter = document.getElementById('date-filter');
        const searchInput = document.getElementById('search-input');
        const paginationInfo = document.getElementById('pagination-info');
        const pageStart = document.getElementById('page-start');
        const pageEnd = document.getElementById('page-end');
        const totalItems = document.getElementById('total-items');
        const pageButtons = document.getElementById('page-buttons');
        const prevPageBtn = document.getElementById('prev-page');
        const nextPageBtn = document.getElementById('next-page');
        const mobilePrevPageBtn = document.getElementById('mobile-prev-page');
        const mobileNextPageBtn = document.getElementById('mobile-next-page');
        
        // Facility elements
        const facilitiesContainer = document.getElementById('facilities-container');
        const allTab = document.getElementById('all-tab');
        const recreationTab = document.getElementById('recreation-tab');
        const meetingTab = document.getElementById('meeting-tab');
        const outdoorTab = document.getElementById('outdoor-tab');
        const eventTab = document.getElementById('event-tab');
        const reservationDate = document.getElementById('reservation-date');
        const modal = document.getElementById('reservation-modal');

        // Set default date to today
        const today = new Date();
        const formattedDate = today.toISOString().split('T')[0];
        if (reservationDate) reservationDate.value = formattedDate;
        if (document.getElementById('modal-date')) document.getElementById('modal-date').value = formattedDate;

        // Initialize page
        document.addEventListener('DOMContentLoaded', async () => {
            await Promise.all([
                loadReservations(),
                loadFacilities()
            ]);
            setupEventListeners();
        });

        // Event listeners
        function setupEventListeners() {
            statusFilter.addEventListener('change', applyFilters);
            dateFilter.addEventListener('change', applyFilters);
            searchInput.addEventListener('input', applyFilters);
            
            prevPageBtn.addEventListener('click', () => changePage(currentPage - 1));
            nextPageBtn.addEventListener('click', () => changePage(currentPage + 1));
            mobilePrevPageBtn.addEventListener('click', () => changePage(currentPage - 1));
            mobileNextPageBtn.addEventListener('click', () => changePage(currentPage + 1));
            
            // Facility filter tabs
            allTab.addEventListener('click', () => filterFacilities('all'));
            recreationTab.addEventListener('click', () => filterFacilities('Recreation'));
            meetingTab.addEventListener('click', () => filterFacilities('Meeting Room'));
            outdoorTab.addEventListener('click', () => filterFacilities('Outdoor Space'));
            eventTab.addEventListener('click', () => filterFacilities('Event Hall'));
            
            // Date filter for facilities
            if (reservationDate) {
                reservationDate.addEventListener('change', () => {
                    if (document.getElementById('modal-date')) {
                        document.getElementById('modal-date').value = reservationDate.value;
                    }
                    renderFacilities(currentFilter);
                });
            }
            
            // Modal close buttons
            if (document.getElementById('close-modal')) {
                document.getElementById('close-modal').addEventListener('click', closeModal);
            }
            
            // Reserve button
            if (document.getElementById('modal-reserve')) {
                document.getElementById('modal-reserve').addEventListener('click', createReservation);
            }
        }

        // Load reservations from API
        async function loadReservations() {
            try {
                const response = await fetch('/homeowner/reservations');
                if (!response.ok) throw new Error('Failed to load reservations');
                
                const data = await response.json();
                if (data.success) {
                    allReservations = data.reservations;
                    applyFilters();
                } else {
                    showError(data.message || 'Error loading reservations');
                }
            } catch (error) {
                console.error('Error loading reservations:', error);
                showError('Failed to load reservations. Please try refreshing the page.');
            }
        }
        
        // Load facilities from API
        async function loadFacilities() {
            try {
                const response = await fetch('/homeowner/facilities');
                if (!response.ok) throw new Error('Failed to load facilities');
                
                const data = await response.json();
                if (data.success) {
                    facilities = data.facilities;
                    renderFacilities('all');
                } else {
                    facilitiesContainer.innerHTML = `
                        <div class="col-span-full text-center py-8">
                            <p class="text-gray-500">${data.message || 'Error loading facilities'}</p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading facilities:', error);
                facilitiesContainer.innerHTML = `
                    <div class="col-span-full text-center py-8">
                        <p class="text-gray-500">Failed to load facilities. Please try refreshing the page.</p>
                    </div>
                `;
            }
        }
        
        // Filter facilities by type
        function filterFacilities(filter) {
            // Update active tab
            [allTab, recreationTab, meetingTab, outdoorTab, eventTab].forEach(tab => {
                tab.classList.remove('nav-tab-active');
            });
            
            if (filter === 'all') {
                allTab.classList.add('nav-tab-active');
            } else if (filter === 'Recreation') {
                recreationTab.classList.add('nav-tab-active');
            } else if (filter === 'Meeting Room') {
                meetingTab.classList.add('nav-tab-active');
            } else if (filter === 'Outdoor Space') {
                outdoorTab.classList.add('nav-tab-active');
            } else if (filter === 'Event Hall') {
                eventTab.classList.add('nav-tab-active');
            }
            
            currentFilter = filter;
            renderFacilities(filter);
        }
        
        // Render facilities in the container
        function renderFacilities(filter) {
            facilitiesContainer.innerHTML = '';
            
            let filteredFacilities = facilities;
            if (filter !== 'all') {
                filteredFacilities = facilities.filter(f => f.typeOfFacility === filter);
            }
            
            if (filteredFacilities.length === 0) {
                facilitiesContainer.innerHTML = `
                    <div class="col-span-full text-center py-8">
                        <p class="text-gray-500">No facilities found for this category.</p>
                    </div>
                `;
                return;
            }
            
            filteredFacilities.forEach(facility => {
                const card = createFacilityCard(facility);
                facilitiesContainer.appendChild(card);
            });
        }
        
        // Create a facility card
        function createFacilityCard(facility) {
            const card = document.createElement('div');
            card.className = 'facility-card bg-white rounded-lg shadow-md overflow-hidden border border-gray-200';
            
            // Generate status badge class
            const statusClass = getStatusClass(facility.status);
            
            card.innerHTML = `
                <div class="relative">
                    <img src="${facility.facilityImg || '/images/placeholder.jpg'}" alt="${facility.facilityName}" 
                         class="w-full h-48 object-cover">
                    ${facility.status.toLowerCase() !== 'available' ? `
                    <div class="absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center">
                        <div class="bg-white px-4 py-2 rounded-md text-red-600 font-semibold">
                            ${facility.status}
                        </div>
                    </div>
                    ` : ''}
                </div>
                <div class="p-4">
                    <h3 class="text-xl font-bold text-gray-900 mb-1">${facility.facilityName}</h3>
                    <p class="text-sm text-gray-600 mb-2">${facility.typeOfFacility}</p>
                    <div class="text-sm text-gray-600 mb-2">Capacity: ${facility.facilityCapacity} people</div>
                    
                    <button class="mt-3 w-full py-2 px-4 rounded-md text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed"
                            ${facility.status.toLowerCase() !== 'available' ? 'disabled' : ''}
                            onclick="openReservationModal(${facility.facilityId})">
                        ${facility.status.toLowerCase() === 'available' ? 'RESERVE NOW' : 'UNAVAILABLE'}
                    </button>
                </div>
            `;
            
            return card;
        }

        // Open reservation modal
        function openReservationModal(facilityId) {
            currentFacilityId = facilityId;
            const facility = facilities.find(f => f.facilityId === facilityId);
            
            if (!facility) return;
            
            // Set modal values
            document.getElementById('modal-facility-name').textContent = facility.facilityName;
            document.getElementById('modal-facility-location').textContent = facility.facilityName + " location";
            document.getElementById('modal-facility-img').src = facility.facilityImg || '/images/placeholder.jpg';
            
            // Working hours
            const [weekday, weekend] = parseWorkingHours(facility.workingHours);
            document.getElementById('modal-weekday-hours').textContent = weekday;
            document.getElementById('modal-weekend-hours').textContent = weekend;
            
            // Max capacity
            document.getElementById('modal-max-capacity').textContent = `(Maximum: ${facility.facilityCapacity} people)`;
            document.getElementById('modal-capacity').max = facility.facilityCapacity;
            document.getElementById('modal-capacity').value = Math.min(20, facility.facilityCapacity);
            
            // Rules
            document.getElementById('modal-rules').innerHTML = formatRules(facility.rulesRegulations);
            
            // Date and time
            document.getElementById('modal-date').value = reservationDate.value;
            
            // Set default times (9 AM to 11 AM)
            document.getElementById('modal-time-in').value = '09:00';
            document.getElementById('modal-time-out').value = '11:00';
            
            // Show modal with animation
            modal.classList.remove('hidden');
            modal.classList.add('opacity-0');
            
            // Force a reflow to enable transition
            void modal.offsetWidth;
            
            modal.classList.add('opacity-100');
            modal.querySelector('.bg-white').classList.add('scale-100');
            modal.querySelector('.bg-white').classList.remove('scale-95');
        }

        // Close reservation modal
        function closeModal() {
            // Hide with animation
            modal.classList.remove('opacity-100');
            modal.classList.add('opacity-0');
            modal.querySelector('.bg-white').classList.remove('scale-100');
            modal.querySelector('.bg-white').classList.add('scale-95');
            
            // After animation completes, hide the modal
            setTimeout(() => {
                modal.classList.add('hidden');
                currentFacilityId = null;
            }, 300);
        }

        // Create a new reservation
        async function createReservation() {
            if (!currentFacilityId) return;
            
            const modalDate = document.getElementById('modal-date').value;
            const timeIn = document.getElementById('modal-time-in').value;
            const timeOut = document.getElementById('modal-time-out').value;
            const capacity = document.getElementById('modal-capacity').value;
            
            // Validation
            if (!modalDate || !timeIn || !timeOut || !capacity) {
                alert('Please fill in all fields');
                return;
            }
            
            const dateObj = new Date(modalDate);
            const timeInObj = new Date(`${modalDate}T${timeIn}`);
            const timeOutObj = new Date(`${modalDate}T${timeOut}`);
            
            if (timeInObj >= timeOutObj) {
                alert('Time out must be after time in');
                return;
            }
            
            // Create reservation object
            const reservation = {
                facilityId: currentFacilityId,
                capacity: parseInt(capacity),
                dateOfReservation: dateObj.toISOString(),
                reservationTimeIn: timeInObj.toISOString(),
                reservationTimeOut: timeOutObj.toISOString()
            };
            
            try {
                const response = await fetch('/homeowner/reservations/create', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(reservation)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Reservation created successfully!');
                    closeModal();
                    await Promise.all([
                        loadReservations(),
                        loadFacilities()
                    ]);
                } else {
                    alert(data.message || 'Error creating reservation');
                }
            } catch (error) {
                console.error('Error creating reservation:', error);
                alert('Failed to create reservation. Please try again.');
            }
        }

        // Apply filters and search
        function applyFilters() {
            const statusValue = statusFilter.value;
            const dateValue = dateFilter.value;
            const searchValue = searchInput.value.toLowerCase();
            
            filteredReservations = allReservations.filter(reservation => {
                // Status filter
                if (statusValue !== 'all' && reservation.status !== statusValue) {
                    return false;
                }
                
                // Date filter
                if (dateValue) {
                    const reservationDate = new Date(reservation.dateOfReservation).toISOString().split('T')[0];
                    if (reservationDate !== dateValue) {
                        return false;
                    }
                }
                
                // Search filter
                if (searchValue && !reservation.facilityName.toLowerCase().includes(searchValue)) {
                    return false;
                }
                
                return true;
            });
            
            // Reset to first page when filters change
            currentPage = 1;
            renderReservations();
            updatePagination();
        }

        // Render reservations in the table
        function renderReservations() {
            reservationsTbody.innerHTML = '';
            
            if (filteredReservations.length === 0) {
                reservationsTbody.innerHTML = `
                <tr>
                    <td colspan="6" class="px-6 py-12 text-center">
                        <p class="text-gray-500">No reservations found matching your criteria.</p>
                    </td>
                </tr>`;
                return;
            }
            
            // Calculate page bounds
            const start = (currentPage - 1) * itemsPerPage;
            const end = Math.min(start + itemsPerPage, filteredReservations.length);
            const paginatedReservations = filteredReservations.slice(start, end);
            
            paginatedReservations.forEach(reservation => {
                const row = document.createElement('tr');
                
                const statusClass = getStatusClass(reservation.status);
                const formattedDate = formatDate(reservation.dateOfReservation);
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="h-10 w-10 flex-shrink-0">
                                <img class="h-10 w-10 rounded-full object-cover" src="${reservation.facilityImage || '/images/placeholder.jpg'}" alt="">
                            </div>
                            <div class="ml-4">
                                <div class="text-sm font-medium text-gray-900">${reservation.facilityName}</div>
                                <div class="text-sm text-gray-500">${reservation.facilityType}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">${formattedDate}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">${reservation.timeIn} - ${reservation.timeOut}</div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ${reservation.capacity}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="status-badge ${statusClass}">${reservation.status}</span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        ${reservation.status === 'Pending' ? `
                        <button onclick="cancelReservation(${reservation.reservationId})" 
                                class="text-red-600 hover:text-red-900">
                            Cancel
                        </button>
                        ` : ''}
                    </td>
                `;
                
                reservationsTbody.appendChild(row);
            });
        }

        // Update pagination controls
        function updatePagination() {
            const totalPages = Math.ceil(filteredReservations.length / itemsPerPage);
            const start = (currentPage - 1) * itemsPerPage + 1;
            const end = Math.min(start + itemsPerPage - 1, filteredReservations.length);
            
            // Update info text
            pageStart.textContent = filteredReservations.length > 0 ? start : 0;
            pageEnd.textContent = end;
            totalItems.textContent = filteredReservations.length;
            
            // Enable/disable prev/next buttons
            prevPageBtn.disabled = currentPage <= 1;
            nextPageBtn.disabled = currentPage >= totalPages;
            mobilePrevPageBtn.disabled = currentPage <= 1;
            mobileNextPageBtn.disabled = currentPage >= totalPages;
            
            prevPageBtn.classList.toggle('opacity-50', currentPage <= 1);
            nextPageBtn.classList.toggle('opacity-50', currentPage >= totalPages);
            mobilePrevPageBtn.classList.toggle('opacity-50', currentPage <= 1);
            mobileNextPageBtn.classList.toggle('opacity-50', currentPage >= totalPages);
            
            // Generate page buttons
            pageButtons.innerHTML = '';
            
            // Determine which page buttons to show
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            
            if (endPage - startPage < 4 && totalPages > 4) {
                startPage = Math.max(1, endPage - 4);
            }
            
            for (let i = startPage; i <= endPage; i++) {
                const button = document.createElement('button');
                button.className = `relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${i === currentPage ? 'bg-indigo-600 text-white hover:bg-indigo-700 ring-indigo-600' : ''}`;
                button.textContent = i;
                button.addEventListener('click', () => changePage(i));
                pageButtons.appendChild(button);
            }
        }

        // Change current page
        function changePage(page) {
            const totalPages = Math.ceil(filteredReservations.length / itemsPerPage);
            if (page < 1 || page > totalPages) return;
            
            currentPage = page;
            renderReservations();
            updatePagination();
        }

        // Cancel a reservation
        async function cancelReservation(reservationId) {
            if (!confirm('Are you sure you want to cancel this reservation?')) {
                return;
            }
            
            try {
                const response = await fetch(`/homeowner/reservations/${reservationId}/cancel`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('Reservation cancelled successfully!');
                    await loadReservations();
                } else {
                    alert(data.message || 'Error cancelling reservation');
                }
            } catch (error) {
                console.error('Error cancelling reservation:', error);
                alert('Failed to cancel reservation. Please try again.');
            }
        }

        // Helper functions
        function getStatusClass(status) {
            status = status.toLowerCase();
            if (status === 'available') return 'status-available';
            if (status === 'pending') return 'status-pending';
            if (status === 'confirmed') return 'status-confirmed';
            if (status === 'cancelled') return 'status-cancelled';
            if (status === 'rejected') return 'status-rejected';
            if (status === 'completed') return 'status-completed';
            if (status === 'full') return 'status-full'; 
            if (status === 'under maintenance') return 'status-maintenance';
            return '';
        }

        function formatDate(dateString) {
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            return new Date(dateString).toLocaleDateString(undefined, options);
        }
        
        function parseWorkingHours(workingHours) {
            // Default values
            const defaultWeekday = '9:00 AM - 6:00 PM';
            const defaultWeekend = '10:00 AM - 4:00 PM';
            
            try {
                // Try to parse working hours, format could be "Weekday: 9AM-6PM; Weekend: 10AM-4PM"
                const parts = workingHours.split(';');
                let weekday = defaultWeekday;
                let weekend = defaultWeekend;
                
                parts.forEach(part => {
                    const trimmed = part.trim();
                    if (trimmed.toLowerCase().startsWith('weekday')) {
                        weekday = trimmed.split(':')[1].trim();
                    } else if (trimmed.toLowerCase().startsWith('weekend')) {
                        weekend = trimmed.split(':')[1].trim();
                    }
                });
                
                return [weekday, weekend];
            } catch (e) {
                // If parsing fails, return defaults
                return [defaultWeekday, defaultWeekend];
            }
        }
        
        function formatRules(rulesText) {
            if (!rulesText) return '<p>No rules specified.</p>';
            
            // Convert line breaks to HTML
            return rulesText.split('\n')
                .filter(line => line.trim() !== '')
                .map((line, index) => `<p class="mb-1">${index + 1}. ${line}</p>`)
                .join('');
        }

        function showError(message) {
            reservationsTbody.innerHTML = `
            <tr>
                <td colspan="6" class="px-6 py-12 text-center">
                    <svg class="mx-auto h-12 w-12 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                    </svg>
                    <p class="mt-2 text-gray-500">${message}</p>
                </td>
            </tr>`;
        }

        // Make functions accessible to inline event handlers
        window.cancelReservation = cancelReservation;
        window.openReservationModal = openReservationModal;
    </script>
} 