@{
    ViewData["Title"] = "Service Requests";
    Layout = "_UniversalLayout";
}

<div class="bg-white shadow overflow-hidden sm:rounded-lg">
    <div class="px-4 py-5 sm:px-6 flex justify-between">
        <div>
            <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:leading-9">Service Requests</h2>
            <p class="mt-1 max-w-2xl text-sm text-gray-500">Manage your service and maintenance requests</p>
        </div>
        <button id="new-request-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-homeowner hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-homeowner">
            New Request
        </button>
    </div>

    <!-- Tabs -->
    <div class="border-b border-gray-200">
        <nav class="flex -mb-px">
            <button class="request-tab text-center w-1/4 py-4 px-1 border-b-2 border-homeowner font-medium text-sm text-homeowner" data-status="all">
                All
            </button>
            <button class="request-tab text-center w-1/4 py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300" data-status="pending">
                Pending
            </button>
            <button class="request-tab text-center w-1/4 py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300" data-status="in-progress">
                In Progress
            </button>
            <button class="request-tab text-center w-1/4 py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700 hover:border-gray-300" data-status="completed">
                Completed
            </button>
        </nav>
    </div>

    <!-- Request List -->
    <div class="bg-white shadow overflow-hidden sm:rounded-md mt-4">
        <ul id="requests-container" class="divide-y divide-gray-200">
            <li class="px-6 py-4 text-center text-gray-500">
                Loading requests...
            </li>
        </ul>
    </div>
</div>

<!-- New Request Modal -->
<div id="request-modal" class="fixed inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <form id="request-form">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                                New Service Request
                            </h3>
                            <div class="mt-4 space-y-4">
                                <div>
                                    <label for="request-type" class="block text-sm font-medium text-gray-700">Request Type</label>
                                    <select id="request-type" name="requestType" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-homeowner focus:border-homeowner sm:text-sm rounded-md" required>
                                        <option value="">Select a request type</option>
                                        <option value="Maintenance">Maintenance</option>
                                        <option value="Housekeeping">Housekeeping</option>
                                        <option value="Security">Security</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="priority" class="block text-sm font-medium text-gray-700">Priority</label>
                                    <select id="priority" name="priority" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-homeowner focus:border-homeowner sm:text-sm rounded-md" required>
                                        <option value="Low">Low</option>
                                        <option value="Medium" selected>Medium</option>
                                        <option value="High">High</option>
                                        <option value="Emergency">Emergency</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
                                    <textarea id="description" name="description" rows="4" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-homeowner focus:border-homeowner sm:text-sm" placeholder="Please describe the issue in detail" required></textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button type="submit" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-homeowner text-base font-medium text-white hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-homeowner sm:ml-3 sm:w-auto sm:text-sm">
                        Submit Request
                    </button>
                    <button type="button" id="cancel-btn" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                        Cancel
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Request Detail Modal -->
<div id="detail-modal" class="fixed inset-0 overflow-y-auto hidden" aria-labelledby="detail-modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900" id="detail-modal-title">
                            Request Details
                        </h3>
                        <div class="mt-4">
                            <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 rounded-md">
                                <dt class="text-sm font-medium text-gray-500">Request Type</dt>
                                <dd id="detail-type" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt class="text-sm font-medium text-gray-500">Priority</dt>
                                <dd id="detail-priority" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 rounded-md">
                                <dt class="text-sm font-medium text-gray-500">Status</dt>
                                <dd id="detail-status" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                <dt class="text-sm font-medium text-gray-500">Date Submitted</dt>
                                <dd id="detail-date" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                            <div class="bg-gray-50 px-4 py-5 sm:px-6 rounded-md">
                                <dt class="text-sm font-medium text-gray-500 mb-2">Description</dt>
                                <dd id="detail-description" class="mt-1 text-sm text-gray-900"></dd>
                            </div>
                            <div id="staff-assigned-section" class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 hidden">
                                <dt class="text-sm font-medium text-gray-500">Staff Assigned</dt>
                                <dd id="detail-staff" class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2"></dd>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <button type="button" id="detail-close-btn" class="w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-homeowner sm:ml-3 sm:w-auto sm:text-sm">
                    Close
                </button>
                <button type="button" id="detail-cancel-btn" class="mt-3 w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:mt-0 sm:w-auto sm:text-sm hidden">
                    Cancel Request
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const newRequestBtn = document.getElementById('new-request-btn');
            const requestModal = document.getElementById('request-modal');
            const requestForm = document.getElementById('request-form');
            const cancelBtn = document.getElementById('cancel-btn');
            const requestsContainer = document.getElementById('requests-container');
            const requestTabs = document.querySelectorAll('.request-tab');
            const detailModal = document.getElementById('detail-modal');
            const detailCloseBtn = document.getElementById('detail-close-btn');
            const detailCancelBtn = document.getElementById('detail-cancel-btn');
            
            let currentTab = 'all';
            let serviceRequests = [];

            // Event Listeners
            newRequestBtn.addEventListener('click', openRequestModal);
            cancelBtn.addEventListener('click', closeRequestModal);
            requestForm.addEventListener('submit', submitServiceRequest);
            detailCloseBtn.addEventListener('click', closeDetailModal);
            detailCancelBtn.addEventListener('click', cancelServiceRequest);
            
            requestTabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    setActiveTab(tab.dataset.status);
                    filterRequests(tab.dataset.status);
                });
            });

            // Functions
            function openRequestModal() {
                requestModal.classList.remove('hidden');
                requestForm.reset();
            }

            function closeRequestModal() {
                requestModal.classList.add('hidden');
            }
            
            function closeDetailModal() {
                detailModal.classList.add('hidden');
            }

            function setActiveTab(status) {
                currentTab = status;
                requestTabs.forEach(tab => {
                    if (tab.dataset.status === status) {
                        tab.classList.add('border-homeowner', 'text-homeowner');
                        tab.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
                    } else {
                        tab.classList.remove('border-homeowner', 'text-homeowner');
                        tab.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
                    }
                });
            }

            function filterRequests(status) {
                if (status === 'all') {
                    renderRequests(serviceRequests);
                    return;
                }
                
                const statusMap = {
                    'pending': 'Pending',
                    'in-progress': 'In Progress',
                    'completed': 'Completed'
                };
                
                const filtered = serviceRequests.filter(req => req.serviceStatus === statusMap[status]);
                renderRequests(filtered);
            }

            function formatDate(dateString) {
                const options = { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' };
                return new Date(dateString).toLocaleDateString(undefined, options);
            }

            function renderRequests(requests) {
                if (requests.length === 0) {
                    requestsContainer.innerHTML = `
                        <li class="px-6 py-4 text-center text-gray-500">
                            No service requests found.
                        </li>
                    `;
                    return;
                }

                requestsContainer.innerHTML = '';
                requests.forEach(request => {
                    const statusColorClass = getStatusColorClass(request.serviceStatus);
                    
                    const requestEl = document.createElement('li');
                    requestEl.className = 'block hover:bg-gray-50';
                    requestEl.innerHTML = `
                        <div class="px-4 py-4 sm:px-6 cursor-pointer">
                            <div class="flex items-center justify-between">
                                <p class="text-sm font-medium text-homeowner truncate">
                                    ${request.requestType}
                                </p>
                                <div class="ml-2 flex-shrink-0 flex">
                                    <p class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusColorClass}">
                                        ${request.serviceStatus}
                                    </p>
                                </div>
                            </div>
                            <div class="mt-2 sm:flex sm:justify-between">
                                <div class="sm:flex">
                                    <p class="flex items-center text-sm text-gray-500">
                                        <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                            <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                                        </svg>
                                        Priority: ${request.priority}
                                    </p>
                                </div>
                                <div class="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                                    <svg class="flex-shrink-0 mr-1.5 h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
                                    </svg>
                                    <p>
                                        Submitted: ${formatDate(request.requestDateTime)}
                                    </p>
                                </div>
                            </div>
                        </div>
                    `;
                    
                    requestEl.addEventListener('click', () => showRequestDetails(request));
                    requestsContainer.appendChild(requestEl);
                });
            }

            function getStatusColorClass(status) {
                switch (status) {
                    case 'Pending':
                        return 'bg-yellow-100 text-yellow-800';
                    case 'In Progress':
                        return 'bg-blue-100 text-blue-800';
                    case 'Completed':
                        return 'bg-green-100 text-green-800';
                    case 'Cancelled':
                        return 'bg-red-100 text-red-800';
                    default:
                        return 'bg-gray-100 text-gray-800';
                }
            }

            function showRequestDetails(request) {
                document.getElementById('detail-type').textContent = request.requestType;
                document.getElementById('detail-priority').textContent = request.priority;
                
                const statusEl = document.getElementById('detail-status');
                statusEl.textContent = request.serviceStatus;
                statusEl.className = `mt-1 text-sm sm:mt-0 sm:col-span-2 ${getStatusColorClass(request.serviceStatus)}`;
                statusEl.style.padding = '2px 8px';
                statusEl.style.borderRadius = '9999px';
                statusEl.style.display = 'inline-block';
                
                document.getElementById('detail-date').textContent = formatDate(request.requestDateTime);
                document.getElementById('detail-description').textContent = request.description;
                
                // Show staff info if assigned
                const staffSection = document.getElementById('staff-assigned-section');
                if (request.staffId) {
                    staffSection.classList.remove('hidden');
                    document.getElementById('detail-staff').textContent = request.staffName || 'Assigned to staff';
                } else {
                    staffSection.classList.add('hidden');
                }
                
                // Show cancel button only for pending requests
                if (request.serviceStatus === 'Pending') {
                    detailCancelBtn.classList.remove('hidden');
                    detailCancelBtn.dataset.requestId = request.serviceRequestId;
                } else {
                    detailCancelBtn.classList.add('hidden');
                }
                
                detailModal.classList.remove('hidden');
            }

            async function submitServiceRequest(e) {
                e.preventDefault();
                
                const requestData = {
                    requestType: document.getElementById('request-type').value,
                    priority: document.getElementById('priority').value,
                    description: document.getElementById('description').value
                };
                
                try {
                    const response = await fetch('/homeowner/service-requests/create', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(requestData)
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        closeRequestModal();
                        fetchServiceRequests();
                        alert('Service request submitted successfully!');
                    } else {
                        alert('Failed to submit service request: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while submitting your request. Please try again.');
                }
            }

            async function cancelServiceRequest() {
                const requestId = detailCancelBtn.dataset.requestId;
                
                try {
                    const response = await fetch(`/homeowner/service-requests/${requestId}/cancel`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    const result = await response.json();
                    if (result.success) {
                        closeDetailModal();
                        fetchServiceRequests();
                        alert('Service request cancelled successfully!');
                    } else {
                        alert('Failed to cancel service request: ' + result.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('An error occurred while cancelling your request. Please try again.');
                }
            }

            async function fetchServiceRequests() {
                try {
                    const response = await fetch('/homeowner/service-requests/list');
                    const result = await response.json();
                    
                    if (result.success) {
                        serviceRequests = result.requests;
                        filterRequests(currentTab);
                    } else {
                        console.error('Failed to fetch service requests:', result.message);
                        requestsContainer.innerHTML = `
                            <li class="px-6 py-4 text-center text-red-500">
                                Failed to load service requests.
                            </li>
                        `;
                    }
                } catch (error) {
                    console.error('Error:', error);
                    requestsContainer.innerHTML = `
                        <li class="px-6 py-4 text-center text-red-500">
                            An error occurred while loading service requests.
                        </li>
                    `;
                }
            }

            // Initialize
            fetchServiceRequests();
        });
    </script>
}